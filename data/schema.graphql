schema {
  query: Query
  mutation: Mutation
}

input AddFilterCategoryInput {
  categoryName: String!
  userID: Int!
  clientMutationId: String!
}

type AddFilterCategoryPayload {
  category: Category
  viewer: User
  clientMutationId: String!
}

type Category implements Node {
  id: ID!
  name: String
  color: String
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]
}

type CategoryEdge {
  node: Category
  cursor: String!
}

type Event implements Node {
  id: ID!
  eventID: Int
  title: String
  subtitle: String
  description: String
  url: String
  cost: Float
  duration: Int
  categories(after: String, first: Int, before: String, last: Int): CategoryConnection
  numberOfFriends: String
}

type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge]
}

type EventEdge {
  node: Event
  cursor: String!
}

type Mutation {
  addCategoryFilter(input: AddFilterCategoryInput!): AddFilterCategoryPayload
  removeCategoryFilter(input: RemoveFilterCategoryInput!): RemoveFilterCategoryPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  node(id: ID!): Node
  viewer: User
  events(first: Int = 5): [Event]
  event(id: Int): Event
}

input RemoveFilterCategoryInput {
  categoryName: String!
  userID: Int!
  clientMutationId: String!
}

type RemoveFilterCategoryPayload {
  category: Category
  viewer: User
  clientMutationId: String!
}

type User implements Node {
  id: ID!
  userID: Int
  name: String
  email: String
  events(category: String = "any", after: String, first: Int, before: String, last: Int): EventConnection
  categories(after: String, first: Int, before: String, last: Int): CategoryConnection
  activeFilterCategories(after: String, first: Int, before: String, last: Int): CategoryConnection
}
